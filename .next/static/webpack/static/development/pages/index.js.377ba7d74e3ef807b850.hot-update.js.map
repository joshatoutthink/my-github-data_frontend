{"version":3,"file":"static/webpack/static/development/pages/index.js.377ba7d74e3ef807b850.hot-update.js","sources":["webpack:///./components/LineGraph.js"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nimport XAxisLines from \"../graphComponents/XAxisLines\";\nimport YAxisLines from \"../graphComponents/YAxisLines\";\nimport PolyLine from \"../graphComponents/PolyLine\";\n\nconst LineGraph = ({ data, className, xLabels }) => {\n  const viewBox = {\n    w: 400,\n    h: 100,\n  };\n  const { w, h } = viewBox;\n  const threeLabels = arr => [\n    arr[0],\n    arr[Math.floor(arr.length / 2)],\n    arr[arr.length - 1],\n  ];\n\n  const outputLabels = threeLabels(xLabels);\n  const offsetByOne = num => num * 0.1;\n  return (\n    <svg viewBox={`0 0 ${w} ${h + offsetByOne(h)}`} className={className}>\n      <g className='grid grid-x'>\n        <line x1='0' x2={w} y1={h} y2={h} />\n      </g>\n      <g className='grid grid-y'>\n        <line x1='0' x2='0' y1='0' y2={h} />\n      </g>\n      <XAxisLines dataset={data} viewBox={viewBox} />\n      <YAxisLines dataset={data} viewBox={viewBox} />\n      <PolyLine dataset={data} viewBox={viewBox} />\n      <g>\n        {outputLabels.map((label, index) => {\n          const xPos =\n            index !== outputLabels.length - 1\n              ? (index * w) / 2\n              : (index * w) / 2 - offsetByOne(w);\n          return (\n            <text key={label} x={xPos} y={h + offsetByOne(h)}>\n              {label}\n            </text>\n          );\n        })}\n      </g>\n    </svg>\n  );\n};\n\nexport default styled(LineGraph)`\n  width: 100%;\n  height: auto;\n  background: white;\n  .grid {\n    stroke: black;\n    stroke-width: 3;\n  }\n  .increment-line {\n    stroke: black;\n    stroke-width: 0.2;\n  }\n  text {\n    font-size: 0.5em;\n  }\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}